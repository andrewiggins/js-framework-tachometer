name: CI-master

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      - run: npm run setup all
      - run: npm run build
      - run: npm run publish
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  bench_01_run1k:
    name: Bench 01_run1k
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - name: Run npm ci
        shell: bash
        env:
          # Skip downloading Firefox driver until we bench against it
          GECKODRIVER_SKIP_DOWNLOAD: "true"
        run: |
          [[ "$(uname -o)" == "Msys" ]] && exe="chromedriver.exe" || exe="chromedriver"
          export CHROMEDRIVER_FILEPATH=$(which $exe)
          echo $CHROMEDRIVER_FILEPATH
          npm ci
        # $env:CHROMEDRIVER_FILEPATH=(Join-Path $env:CHROMEWEBDRIVER chromedriver.exe)
      - uses: actions/download-artifact@v2
        with:
          name: dist
      - run: node ./scripts bench inferno- --bench 01_run1k

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    env:
      PUBLISH_BRANCH: gh-pages
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.PUBLISH_BRANCH }}
      - name: Configure local repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "${{ github.workflow }} Github Action"
      - uses: actions/download-artifact@v1
        with:
          name: dist
          path: .
      - name: Commit and push if changes
        run: |
          git add .
          git status -s
          CHANGES=$(git status -s)
          if [ "$CHANGES" != "" ]; then
            echo "Changes detected"
            echo "Committing..."
            git commit -m "Updates from ${{ github.workflow }}#${{ github.run_number }}"
            echo "Pushing..."
            git push origin ${{ env.PUBLISH_BRANCH }}
          else
            echo "No changes detected. Not pushing to ${{ env.PUBLISH_BRANCH }}"
          fi
